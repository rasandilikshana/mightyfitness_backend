- name: Update and upgrade apt packages
  apt:
    update_cache: yes
    upgrade: dist

- name: Add repository for PHP 8.1
  apt_repository:
    repo: ppa:ondrej/php
    state: present

- name: Update apt cache
  apt:
    update_cache: yes

- name: Install required packages
  apt:
    name:
      - software-properties-common
      - curl
    state: present

- name: Ensure necessary packages are installed
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - python3-dev
    - libmysqlclient-dev
    - python3-pip
    - pkg-config
    - build-essential
    - acl

- name: Install mysqlclient package
  pip:
    name: mysqlclient

- name: Install MySQL server
  apt:
    name: mysql-server
    state: present

- name: Ensure MySQL service is started and enabled
  service:
    name: mysql
    state: started
    enabled: yes

- name: Create Laravel database
  community.mysql.mysql_db:
    name: "{{ mysql_db_name }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Create Laravel user with necessary privileges
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    priv: "{{ mysql_db_name }}.*:ALL"
    host: 'localhost'
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock

- name: Install PHP 8.1 and common extensions
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - php8.1
    - php8.1-cli
    - php8.1-fpm
    - php8.1-mysql
    - php8.1-xml
    - php8.1-mbstring
    - php8.1-curl
    - php8.1-zip
    - php8.1-gd

- name: Ensure PHP-FPM service is started and enabled
  service:
    name: php8.1-fpm
    state: started
    enabled: yes

- name: Install Nginx
  apt:
    name: nginx
    state: present

- name: Stop conflicting web servers
  service:
    name: "{{ item }}"
    state: stopped
  loop:
    - apache2
    - httpd
  ignore_errors: yes

- name: Disable conflicting web servers
  service:
    name: "{{ item }}"
    enabled: no
  loop:
    - apache2
    - httpd
  ignore_errors: yes

- name: Copy Laravel project files to server
  synchronize:
    src: ../../../../
    dest: "{{ target_directory }}"
    delete: yes

- name: Install Composer
  get_url:
    url: https://getcomposer.org/installer
    dest: /tmp/composer-setup.php

- name: Install Composer globally
  command: php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer

- name: Install Laravel dependencies
  command: composer install --no-interaction --ignore-platform-reqs
  args:
    chdir: "{{ target_directory }}"

- name: Install Node.js dependencies
  apt:
    name: build-essential
    state: present

- name: Download Node.js 21.7.3
  get_url:
    url: "https://nodejs.org/dist/v21.7.3/node-v21.7.3-linux-x64.tar.xz"
    dest: "/tmp/node-v21.7.3-linux-x64.tar.xz"

- name: Extract Node.js
  unarchive:
    src: "/tmp/node-v21.7.3-linux-x64.tar.xz"
    dest: "/usr/local"
    remote_src: yes
    creates: "/usr/local/node-v21.7.3-linux-x64"

- name: Create symlinks for Node.js
  file:
    src: "/usr/local/node-v21.7.3-linux-x64/bin/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    state: link
  loop:
    - node
    - npm

- name: Verify Node.js installation
  command: node -v
  register: node_version

- name: Display Node.js version
  debug:
    msg: "Node.js version is {{ node_version.stdout }}"

- name: Install npm dependencies
  npm:
    path: "{{ target_directory }}"
    state: present
    production: no
  environment:
    NODE_ENV: development

- name: Set Laravel environment variables
  lineinfile:
    path: "{{ target_directory }}/.env"
    regexp: '^DB_{{ item.key }}='
    line: "DB_{{ item.key }}={{ item.value }}"
  loop:
    - { key: 'DATABASE', value: "{{ mysql_db_name }}" }
    - { key: 'USERNAME', value: "{{ mysql_user }}" }
    - { key: 'PASSWORD', value: "{{ mysql_password }}" }

- name: Generate Laravel application key
  command: php artisan key:generate
  args:
    chdir: "{{ target_directory }}"

- name: Create Laravel storage symlink
  command: php artisan storage:link
  args:
    chdir: "{{ target_directory }}"

- name: Optimize Laravel application
  command: php artisan optimize:clear -q
  args:
    chdir: "{{ target_directory }}"
  ignore_errors: yes

- name: Cache Laravel configuration
  command: php artisan config:cache -q
  args:
    chdir: "{{ target_directory }}"
  ignore_errors: yes

- name: Run database migrations
  command: php artisan migrate --force
  args:
    chdir: "{{ target_directory }}"

- name: Set Laravel storage and bootstrap directory permissions
  file:
    path: "{{ target_directory }}/{{ item.path }}"
    state: directory
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse | default(false) }}"
  loop:
    - { path: 'bootstrap', mode: '0775', recurse: false }
    - { path: 'storage', mode: '0775', recurse: true }

- name: Install Redis
  apt:
    name: redis-server
    state: present

- name: Ensure Redis is running
  service:
    name: redis
    state: started
    enabled: yes

- name: Install Supervisor
  apt:
    name: supervisor
    state: present

- name: Configure Supervisor for Laravel queue
  copy:
    content: |
      [program:laravel-queue]
      command=php {{ target_directory }}/artisan queue:work --tries=3 --timeout=90
      autostart=true
      autorestart=true
      numprocs=3
      redirect_stderr=true
      stdout_logfile=/var/log/laravel-queue.log
    dest: /etc/supervisor/conf.d/laravel-queue.conf
  notify: Restart Supervisor

- name: Set up cron job for Laravel scheduler
  cron:
    name: "Laravel Scheduler"
    minute: "*"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "*"
    job: "cd {{ target_directory }} && php artisan schedule:run >> /dev/null 2>&1"
    user: "www-data"

- name: Configure Fail2Ban
  copy:
    content: |
      [DEFAULT]
      bantime = 10m
      findtime = 10m
      maxretry = 3
      [sshd]
      enabled = true
    dest: /etc/fail2ban/jail.local
  notify: Restart Fail2Ban

- name: Install UFW
  apt:
    name: ufw
    state: present

- name: Enable UFW firewall
  ufw:
    state: enabled

- name: Allow essential ports in UFW
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "22"
    - "80"
    - "443"

- name: Install private key
  copy:
    src: ./nginx/private.key
    dest: /etc/ssl/private/private.key
    mode: '0600'

- name: Install SSL certificate
  copy:
    src: ./nginx/certificate.crt
    dest: /etc/ssl/certs/certificate.crt

- name: Copy Nginx configuration
  copy:
    src: ./nginx/nginx.conf
    dest: /etc/nginx/sites-available/laravel

- name: Enable Nginx site
  file:
    src: /etc/nginx/sites-available/laravel
    dest: /etc/nginx/sites-enabled/laravel
    state: link

- name: Restart Nginx
  service:
    name: nginx
    state: restarted
